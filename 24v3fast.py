from itertools import permutations, combinations_with_replacement

# list the numbers to use here
numbahs = [2,4,6,8]
# enter the number to calculate here
ansah = 24

numberlist = input("Enter a list of four integers, separated by commas [default: 2,4,6,8]: ")
if numberlist:
    numbahs = [int(n) for n in numberlist.split(',')]
answer = input("Enter a number compute to [default: 24]: ")
if answer:
    ansah = int(answer)

expressions = [
    lambda a,b,c,d: ((a*b)*c)*d,  # 1
    lambda a,b,c,d: ((a*b)+c)*d,
    lambda a,b,c,d: ((a+b)*c)*d,
    lambda a,b,c,d: ((a*b)-c)*d,
    lambda a,b,c,d: ((a/b)+c)*d,
    lambda a,b,c,d: ((a-b)*c)*d,
    lambda a,b,c,d: ((a/b)-c)*d,
    lambda a,b,c,d: ((a+b)+c)*d,
    lambda a,b,c,d: ((a+b)-c)*d,
    lambda a,b,c,d: ((a-b)-c)*d,  # 10
    lambda a,b,c,d: ((a*b)*c)/d,
    lambda a,b,c,d: ((a*b)/c)/d,
    lambda a,b,c,d: ((a*b)+c)/d,
    lambda a,b,c,d: ((a+b)*c)/d,
    lambda a,b,c,d: ((a*b)-c)/d,
    lambda a,b,c,d: ((a-b)*c)/d,
    lambda a,b,c,d: ((a/b)/c)/d,
    lambda a,b,c,d: ((a/b)+c)/d,
    lambda a,b,c,d: ((a+b)/c)/d,
    lambda a,b,c,d: ((a/b)-c)/d,  #20
    lambda a,b,c,d: ((a-b)/c)/d,
    lambda a,b,c,d: ((a+b)+c)/d,
    lambda a,b,c,d: ((a+b)-c)/d,
    lambda a,b,c,d: ((a-b)-c)/d,
    lambda a,b,c,d: ((a*b)*c)+d,
    lambda a,b,c,d: ((a*b)/c)+d,
    lambda a,b,c,d: ((a*b)+c)+d,
    lambda a,b,c,d: ((a+b)*c)+d,
    lambda a,b,c,d: ((a-b)*c)+d,
    lambda a,b,c,d: ((a/b)/c)+d,  #30
    lambda a,b,c,d: ((a/b)+c)+d,
    lambda a,b,c,d: ((a+b)/c)+d,
    lambda a,b,c,d: ((a-b)/c)+d,
    lambda a,b,c,d: ((a+b)+c)+d,
    lambda a,b,c,d: ((a*b)*c)-d,
    lambda a,b,c,d: ((a*b)/c)-d,
    lambda a,b,c,d: ((a*b)+c)-d,
    lambda a,b,c,d: ((a+b)*c)-d,
    lambda a,b,c,d: ((a*b)-c)-d,
    lambda a,b,c,d: ((a-b)*c)-d,  #40
    lambda a,b,c,d: ((a/b)/c)-d,
    lambda a,b,c,d: ((a/b)+c)-d,
    lambda a,b,c,d: ((a+b)/c)-d,
    lambda a,b,c,d: ((a/b)-c)-d,
    lambda a,b,c,d: ((a-b)/c)-d,
    lambda a,b,c,d: ((a+b)+c)-d,
    lambda a,b,c,d: ((a+b)-c)-d,
    lambda a,b,c,d: ((a-b)-c)-d,
    lambda a,b,c,d: ((a*b)/(c*d)),
    lambda a,b,c,d: ((a*b)*(c/d)),  #50
    lambda a,b,c,d: ((a*b)+(c*d)),
    lambda a,b,c,d: ((a*b)-(c*d)),
    lambda a,b,c,d: ((a*b)/(c/d)),
    lambda a,b,c,d: ((a/b)/(c*d)),
    lambda a,b,c,d: ((a/b)*(c/d)),
    lambda a,b,c,d: ((a*b)+(c/d)),
    lambda a,b,c,d: ((a*b)/(c+d)),
    lambda a,b,c,d: ((a/b)*(c+d)),
    lambda a,b,c,d: ((a+b)/(c*d)),
    lambda a,b,c,d: ((a*b)-(c/d)),  #60
    lambda a,b,c,d: ((a*b)/(c-d)),
    lambda a,b,c,d: ((a/b)-(c*d)),
    lambda a,b,c,d: ((a/b)*(c-d)),
    lambda a,b,c,d: ((a-b)/(c*d)),
    lambda a,b,c,d: ((a+b)*(c+d)),
    lambda a,b,c,d: ((a*b)-(c+d)),
    lambda a,b,c,d: ((a*b)+(c-d)),
    lambda a,b,c,d: ((a+b)-(c*d)),
    lambda a,b,c,d: ((a+b)*(c-d)),  #70
    lambda a,b,c,d: ((a*b)-(c-d)),
    lambda a,b,c,d: ((a-b)-(c*d)),
    lambda a,b,c,d: ((a-b)*(c-d)),
    lambda a,b,c,d: ((a/b)/(c/d)),
    lambda a,b,c,d: ((a/b)+(c/d)),
    lambda a,b,c,d: ((a/b)/(c+d)),
    lambda a,b,c,d: ((a+b)/(c/d)),
    lambda a,b,c,d: ((a/b)-(c/d)),
    lambda a,b,c,d: ((a/b)/(c-d)),
    lambda a,b,c,d: ((a-b)/(c/d)),  #80
    lambda a,b,c,d: ((a+b)/(c+d)),
    lambda a,b,c,d: ((a/b)-(c+d)),
    lambda a,b,c,d: ((a/b)+(c-d)),
    lambda a,b,c,d: ((a+b)-(c/d)),
    lambda a,b,c,d: ((a+b)/(c-d)),
    lambda a,b,c,d: ((a-b)/(c+d)),
    lambda a,b,c,d: ((a/b)-(c-d)),
    lambda a,b,c,d: ((a-b)-(c/d)),
    lambda a,b,c,d: ((a-b)/(c-d)),
    lambda a,b,c,d: ((a+b)-(c+d)),  #90
    lambda a,b,c,d: ((a+b)+(c-d)),
    lambda a,b,c,d: ((a+b)-(c-d)),
    lambda a,b,c,d: ((a-b)-(c+d)),
    lambda a,b,c,d: ((a-b)+(c-d)),
    lambda a,b,c,d: ((a-b)-(c-d))]

# only allow certain rules to work, depending on number ordering
tests = [
    lambda a,b,c,d: a<b,  #1
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,  #10
    lambda a,b,c,d: a<b<c,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,
    lambda a,b,c,d: b<c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: True,  #20
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<b<c,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: b<c,
    lambda a,b,c,d: a<b<c,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,
    lambda a,b,c,d: b<c,  #30
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b<c<d,
    lambda a,b,c,d: a<b<c,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: True,  #40
    lambda a,b,c,d: b<c,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b<c,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: b<c<d,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,  #50
    lambda a,b,c,d: a<b and c<d and a<c,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<c,
    lambda a,b,c,d: a<b and a<c,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,  #60
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,  #70
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: ((a/b)/(c/d)),
    lambda a,b,c,d: ((a/b)+(c/d)),
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: True,
    lambda a,b,c,d: True,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b and c<d,  #80
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: True,
    lambda a,b,c,d: True,
    lambda a,b,c,d: a<b and c<d,
    lambda a,b,c,d: a<b,  #90
    lambda a,b,c,d: a<b,
    lambda a,b,c,d: c<d,
    lambda a,b,c,d: True,
    lambda a,b,c,d: True]


formats = [
    "{0}*{1}*{2}*{3}",
    "(({0}*{1})+{2})*{3}",
    "({0}+{1})*{2}*{3}",
    "(({0}*{1})-{2})*{3}",
    "(({0}/{1})+{2})*{3}",
    "({0}-{1})*{2}*{3}",
    "(({0}/{1})-{2})*{3}",
    "({0}+{1}+{2})*{3}",
    "({0}+{1}-{2})*{3}",
    "({0}-{1}-{2})*{3}",
    "{0}*{1}*{2}/{3}",
    "{0}*{1}/{2}/{3}",
    "(({0}*{1})+{2})/{3}",
    "({0}+{1})*{2}/{3}",
    "(({0}*{1})-{2})/{3}",
    "({0}-{1})*{2}/{3}",
    "{0}/{1}/{2}/{3}",
    "(({0}/{1})+{2})/{3}",
    "({0}+{1})/{2}/{3}",
    "(({0}/{1})-{2})/{3}",
    "({0}-{1})/{2}/{3}",
    "({0}+{1}+{2})/{3}",
    "({0}+{1}-{2})/{3}",
    "({0}-{1}-{2})/{3}",
    "({0}*{1}*{2})+{3}",
    "({0}*{1}/{2})+{3}",
    "{0}*{1}+{2}+{3}",
    "({0}+{1})*{2}+{3}",
    "({0}-{1})*{2}+{3}",
    "({0}/{1}/{2})+{3}",
    "({0}/{1})+{2}+{3}",
    "({0}+{1})/{2}+{3}",
    "({0}-{1})/{2}+{3}",
    "{0}+{1}+{2}+{3}",
    "{0}*{1}*{2}-{3}",
    "{0}*{1}/{2}-{3}",
    "({0}*{1})+{2}-{3}",
    "({0}+{1})*{2}-{3}",
    "{0}*{1}-{2}-{3}",
    "({0}-{1})*{2}-{3}",
    "{0}/{1}/{2}-{3}",
    "{0}/{1}+{2}-{3}",
    "({0}+{1})/{2}-{3}",
    "{0}/{1}-{2}-{3}",
    "({0}-{1})/{2}-{3}",
    "{0}+{1}+{2}-{3}",
    "{0}+{1}-{2}-{3}",
    "{0}-{1}-{2}-{3}",
    "(({0}*{1})/({2}*{3})",
    "(({0}*{1})*({2}/{3})",
    "(({0}*{1})+({2}*{3})",
    "(({0}*{1})-({2}*{3})",
    "(({0}*{1})/({2}/{3})",
    "(({0}/{1})/({2}*{3})",
    "(({0}/{1})*({2}/{3})",
    "(({0}*{1})+({2}/{3})",
    "(({0}*{1})/({2}+{3})",
    "(({0}/{1})*({2}+{3})",
    "(({0}+{1})/({2}*{3})",
    "(({0}*{1})-({2}/{3})",
    "(({0}*{1})/({2}-{3})",
    "(({0}/{1})-({2}*{3})",
    "(({0}/{1})*({2}-{3})",
    "(({0}-{1})/({2}*{3})",
    "(({0}+{1})*({2}+{3})",
    "(({0}*{1})-({2}+{3})",
    "(({0}*{1})+({2}-{3})",
    "(({0}+{1})-({2}*{3})",
    "(({0}+{1})*({2}-{3})",
    "(({0}*{1})-({2}-{3})",
    "(({0}-{1})-({2}*{3})",
    "(({0}-{1})*({2}-{3})",
    "(({0}/{1})/({2}/{3})",
    "(({0}/{1})+({2}/{3})",
    "(({0}/{1})/({2}+{3})",
    "(({0}+{1})/({2}/{3})",
    "(({0}/{1})-({2}/{3})",
    "(({0}/{1})/({2}-{3})",
    "(({0}-{1})/({2}/{3})",
    "(({0}+{1})/({2}+{3})",
    "(({0}/{1})-({2}+{3})",
    "(({0}/{1})+({2}-{3})",
    "(({0}+{1})-({2}/{3})",
    "(({0}+{1})/({2}-{3})",
    "(({0}-{1})/({2}+{3})",
    "(({0}/{1})-({2}-{3})",
    "(({0}-{1})-({2}/{3})",
    "(({0}-{1})/({2}-{3})",
    "(({0}+{1})-({2}+{3})",
    "(({0}+{1})+({2}-{3})",
    "(({0}+{1})-({2}-{3})",
    "(({0}-{1})-({2}+{3})",
    "(({0}-{1})+({2}-{3})",
    "(({0}-{1})-({2}-{3})"]    

rules = zip(tests, expressions, formats)

solnlist = set()
for test, expr, fmt in rules: # for every unique way of combining four numbahs
    for n in permutations(numbahs):  # and every permutation of numbers
        try:
            if test(*n) and (expr(*n) == ansah):
                solnlist.add(fmt.format(*n))
        except:
            pass

print ("There are {0} solutions:".format(len(solnlist)))
for s in solnlist:
    print (s)
